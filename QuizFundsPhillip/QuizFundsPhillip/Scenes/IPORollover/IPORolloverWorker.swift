//
//  IPORolloverWorker.swift
//  QuizFundsPhillip
//
//  Created by BUSSNQ TH on 28/1/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Alamofire
import SwiftyJSON
class IPORolloverWorker {
    
    typealias Models = IPORollovers
    typealias FecthFundsIPODataCompletionHandler = (_ fundsIPOData: [FundIPORolloverDataModels]?,_ error: Error?) -> ()
    func fetchFundsIPOData(nameFund: String,  completionHandler: @escaping FecthFundsIPODataCompletionHandler) {
        let router = Funds.iPO
        Alamofire.request(router).responseJSON { response in
            
            if response.error != nil {
                completionHandler(nil, response.error)
                return
            }
            
            if let data = response.data {
                do {
                    let iPOModelData = try JSONDecoder().decode([FundIPORolloverDataModels].self, from: data)
//                    print("iPOModelData>>", iPOModelData)
                    completionHandler(iPOModelData, nil)
                    
                } catch let error {
                    completionHandler(nil, error)
               
                }
            }
        }
    } // FundIPOsRolloverDatasModels
//    typealias FecthFundsIPOsDatasCompletionHandler = (_ fundsIPOData: [FundIPOsRolloverDatasModels]?,_ error: Error?) -> ()
//    func fetchFundsIPODatas(  completionHandler: @escaping FecthFundsIPOsDatasCompletionHandler) {
//        let router = Funds.iPO
////        print(router)
//        Alamofire.request(router).responseJSON { (response) in
////            print(response.value)
//            if response.error != nil {
//                completionHandler(nil, response.error)
//                return
//            }
//            if let data = response.value {
//                do {
//                    let dataJSON = JSON(data)
//                    let fundAnalystTalk = dataJSON[]
////                    print("Data>>",dataJSON)
//                    let fundAnalystTalkData = try fundAnalystTalk.rawData(options: .fragmentsAllowed)
////                    print("fundAnalystTalkData", fundAnalystTalkData)
//                    let analystTalksData = try JSONDecoder().decode([FundIPOsRolloverDatasModels].self, from: fundAnalystTalkData)
////                    print("FundAnalystReportsModels>>>", analystTalksData)
////                    completionHandler(analystTalksData, nil)
//                } catch let error {
////                    completionHandler(nil, error)
//
//                }
//            }
//        }
//    }
}
