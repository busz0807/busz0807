//
//  CalendarViewController.swift
//  QuizFundsPhillip
//
//  Created by BUSSNQ TH on 16/2/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import FSCalendar

protocol CalendarDisplayLogic: class {
  func displaySomething(viewModel: Calendar.Something.ViewModel)
}

class CalendarViewController: UIViewController, CalendarDisplayLogic{
fileprivate weak var calendar: FSCalendar!
    @IBOutlet weak var viewPagging: UIView!
    var interactor: CalendarBusinessLogic?
  var router: (NSObjectProtocol & CalendarRoutingLogic & CalendarDataPassing)?
    var dateData:String?
  // MARK: Object lifecycle
  
    @IBOutlet weak var setView: UIView!

    @IBOutlet weak var setCalendar: UIView!
    @IBAction func btnBack(_ sender: Any) {
        self.dismiss(animated: false, completion: nil)
    }
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup() {
    let viewController = self
    let interactor = CalendarInteractor()
    let presenter = CalendarPresenter()
    let router = CalendarRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad() {
    super.viewDidLoad()
    doSomething()

    self.setView.clipsToBounds = true
    self.setView.layer.cornerRadius = 10
    self.setView.layer.shadowColor = UIColor.systemGray.cgColor
    self.setView.layer.shadowOpacity = 0.5
    self.setView.layer.shadowRadius = 10
    self.setView.layer.masksToBounds = false
// MARK : Calendar
    let calendar = FSCalendar(frame: CGRect(x: 10, y: 0, width: 320, height: 300))
    calendar.dataSource = self
    calendar.delegate = self
    setCalendar.addSubview(calendar)
    self.calendar = calendar
    

  }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  func doSomething() {
    let request = Calendar.Something.Request()
    interactor?.doSomething(request: request)
  }
  
  func displaySomething(viewModel: Calendar.Something.ViewModel) {
    //nameTextField.text = viewModel.name
  }
}
    func sendclick(date: String) {
    var data = [String: String]()
  
    
    data["date"] = date
 
    NotificationCenter.default.post(name: NSNotification.Name(NotificationCenterCanlendar.Clicked.rawValue), object: nil, userInfo: data)
}
//extension CalendarViewController: FSCalendarDelegate, FSCalendarDataSource {
//    func calendar(_ calendar: FSCalendar, didSelect date: Date, at monthPosition: FSCalendarMonthPosition) {
////        print("Date Selected ")
//        let dataFormatter = DateFormatter()
//        dataFormatter.dateFormat = "dd/MM/yyyy"
//        let formattedDate = dataFormatter.string(from: date)
////        router?.goToback(dateData: formattedDate)
//        self.dateData = formattedDate
//        print("Date" , self.dateData ?? "" )
//        if let datadate = self.dateData {
//            router?.goToback(dateData: datadate)
//        }
////        let myAlert = UIAlertController(title: "Date Tapped", message: formattedDate, preferredStyle: .alert)
////        let dismiss = UIAlertAction(title: "Dismiss", style: .cancel)
////        myAlert.addAction(dismiss)
//   
//    }
//}
extension CalendarViewController: FSCalendarDelegate, FSCalendarDataSource {
    func calendar(_ calendar: FSCalendar, didSelect date: Date, at monthPosition: FSCalendarMonthPosition) {
        let dataFormatter = DateFormatter()
        dataFormatter.dateFormat = "dd/MM/yyyy"
        let formattedDate = dataFormatter.string(from: date)
        print(formattedDate)
        sendclick(date: formattedDate)
        router?.goToback(dateData: formattedDate)
//        router?.goToback(dateData: T##String?)
    }
    func minimumDate(for calendar: FSCalendar) -> Date {
        return Date()
    }
    func maximumDate(for calendar: FSCalendar) -> Date {
        return Date().addingTimeInterval((24*60*60)*60)
    }
}
