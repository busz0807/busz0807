//
//  SearchFundsViewController.swift
//  QuizFundsPhillip
//
//  Created by BUSSNQ TH on 8/2/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import  RealmSwift
protocol SearchFundsDisplayLogic: class {
    func displaySearchFunds(viewModel: SearchFunds.FetchSearchFundsData.ViewModel)
    func displayMainPageName(viewModel: SearchFunds.FetchMainPageName.ViewModel)
}

class SearchFundsViewController: UIViewController, SearchFundsDisplayLogic
{
    @IBAction func btnBack(_ sender: Any) {
        self.dismiss(animated: false, completion: nil)

    }
    @IBOutlet weak var setLabel: UILabel!
    @IBOutlet weak var btnsearchFunds: UISearchBar!
    @IBOutlet weak var tableView: UITableView!
    var mainpage: String = ""
    var interactor: SearchFundsBusinessLogic?
    var router: (NSObjectProtocol & SearchFundsRoutingLogic & SearchFundsDataPassing)?
    var searchFunds :[SearchFundsModel]?
    var fundsList: [ReealmFundsListMobile]?
    var searchfunds:[ReealmFundsListMobile] = []
    let realm: Realm = try! Realm()
  
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = SearchFundsInteractor()
    let presenter = SearchFundsPresenter()
    let router = SearchFundsRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad() {
    super.viewDidLoad()
    doFetchMainPageName()
    print("Server", Realm.Configuration.defaultConfiguration.fileURL)
    doFetchSearchFunds()
  }
  
  // MARK: Do something
  
    func doFetchSearchFunds() {
    let request = SearchFunds.FetchSearchFundsData.Request()
    interactor?.doFetchSearchFunds(request: request)
    
  }
    func doFetchMainPageName() {
    let request = SearchFunds.FetchMainPageName.Request()
    interactor?.doFetchMainPageName(request: request)
    
  }
    func displaySearchFunds(viewModel: SearchFunds.FetchSearchFundsData.ViewModel) {
    //nameTextField.text = viewModel.name
        self.searchFunds = viewModel.searchfunds
//        print("Data",searchFunds)
       //  MARK: Add Database Realm
//        let count = self.searchFunds?.count ?? 0
//        print("count>>", count)
//        print("realm >>> ", realm.configuration)
//        for countIndex in 0...count - 1 {
//            try! realm.write {
//                let data = SearchFundsModel(_change: self.searchFunds?[countIndex]._change, amc: self.searchFunds?[countIndex].amc, approvedDate: self.searchFunds?[countIndex].approvedDate, assetCompany: self.searchFunds?[countIndex].assetCompany, characteristics: self.searchFunds?[countIndex].characteristics, classification: self.searchFunds?[countIndex].classification, closeDate: self.searchFunds?[countIndex].closeDate, code: self.searchFunds?[countIndex].code, cutOffTime: self.searchFunds?[countIndex].cutOffTime, cutOffTimePmoney: self.searchFunds?[countIndex].cutOffTimePmoney, cutOffTimeSell: self.searchFunds?[countIndex].cutOffTimeSell, dividend: self.searchFunds?[countIndex].dividend, enName: self.searchFunds?[countIndex].enName, forexRisk: self.searchFunds?[countIndex].forexRisk, fundId: self.searchFunds?[countIndex].fundId, investCloseDate: self.searchFunds?[countIndex].investCloseDate, investOpenDate: self.searchFunds?[countIndex].investOpenDate, ipoPrice: self.searchFunds?[countIndex].ipoPrice, mainCategory: self.searchFunds?[countIndex].mainCategory, mainCategoryTH: self.searchFunds?[countIndex].mainCategoryTH, min1stInv: self.searchFunds?[countIndex].min1stInv, minHold: self.searchFunds?[countIndex].minHold, minHoldUnits: self.searchFunds?[countIndex].minHoldUnits, minInv: self.searchFunds?[countIndex].minInv, minRedeem: self.searchFunds?[countIndex].minRedeem, minRedeemUnits: self.searchFunds?[countIndex].minRedeemUnits, openDate: self.searchFunds?[countIndex].openDate, risk: self.searchFunds?[countIndex].risk, riskCategory: self.searchFunds?[countIndex].riskCategory, subCategory: self.searchFunds?[countIndex].subCategory, subCategoryTH: self.searchFunds?[countIndex].subCategoryTH, thName: self.searchFunds?[countIndex].thName, type: self.searchFunds?[countIndex].type)
//                let task = ReealmFundsListMobile(data: data)
//                realm.add(task)
//            }
//        }
//  }
}
    func displayMainPageName(viewModel: SearchFunds.FetchMainPageName.ViewModel) {
        print("MainPageName>>", viewModel.mainpage ?? "")
        self.mainpage = viewModel.mainpage ?? ""
    }
    }
    
extension SearchFundsViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.fundsList?.count  ?? 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "SearchFundsViewCell") as! SearchFundsViewCell
        cell.searchfundsData = self.fundsList?[indexPath.row]
        cell.searchcount = self.fundsList
        return cell
    }
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
//        print(indexPath.row)
        if  self.mainpage == "Buy"{
        if let data = self.fundsList {
            router?.sendDatagoToSecondSearchPreview(fundsList: data[0])
        }
        }else {
            if let data = self.fundsList {
            router?.sendDatagoToAddPortPreview(fundsList: data[0])
            }
          
        }
    }
    
    
}
extension SearchFundsViewController: UISearchBarDelegate {
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        print("search text: ", searchText)
        
        let searchName = searchText
        let result = realm.objects(ReealmFundsListMobile.self)
        let search = Array(result)
        if searchName.count == 0 {
            self.setLabel.text = "ประวัติค้นหา"
            self.fundsList = nil
            self.tableView.reloadData()
        } else {
            self.setLabel.text = ""
            let fundsassetCompanySearch = search.filter({ searchbarName  in
                return (searchbarName.assetCompany.lowercased().contains(searchName.lowercased()) )
            })
            self.fundsList = fundsassetCompanySearch
            self.tableView.reloadData()
        }
    }
}
