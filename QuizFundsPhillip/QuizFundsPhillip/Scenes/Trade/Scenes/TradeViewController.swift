//
//  TradeViewController.swift
//  QuizFundsPhillip
//
//  Created by BUSSNQ TH on 8/2/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Parchment

enum NotificationCenterTrade: String {
    case Clicked
}
enum NotificationCenterTradeSearch: String {
    case Clicked
}
protocol TradeDisplayLogic: class
{
  func displaySomething(viewModel: Trade.Something.ViewModel)
 
}


class TradeViewController: UIViewController, TradeDisplayLogic
{
    
    @IBOutlet weak var pageViewPanging: UIView!
    @IBOutlet weak var viewaccount: UIView!
    @IBOutlet weak var viewbuysale: UIView!
    @IBOutlet weak var lbmonney: UIButton!
    @IBOutlet weak var settingtabBar: UITabBarItem!
    
    var interactor: TradeBusinessLogic?
    var router: (NSObjectProtocol & TradeRoutingLogic & TradeDataPassing)?
    var money = "50,000"
    var moneyupdate: String = ""
    var payment: String = ""
    var picefunds: String = ""
    var enName: String = ""
    var thName: String = ""
    var risk: String = ""
    var date: String = ""
  // MARK: Object lifecycle
  
    
      override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
      {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
      }
      
      required init?(coder aDecoder: NSCoder)
      {
        super.init(coder: aDecoder)
        setup()
      }

  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = TradeInteractor()
    let presenter = TradePresenter()
    let router = TradeRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    doSomething()
    setNotificationCenterBuy()
    setNotificationCenterTradeSearch()
    if self.moneyupdate == "" {
        self.lbmonney.setTitle(money, for: .normal)
        
    }else {
        self.lbmonney.setTitle(moneyupdate, for: .normal)
    }
    
//    self.viewbuysale.backgroundColor = #colorLiteral(red: 0.09019608051, green: 0, blue: 0.3019607961, alpha: 1)
//    self.viewaccount.backgroundColor = #colorLiteral(red: 0.08410542458, green: 0.074128218, blue: 0.329483211, alpha: 1)
    //Pagging
  
    let buy = UIStoryboard(name: "Main", bundle: nil).instantiateViewController(withIdentifier: "BuyViewController") as! BuyViewController
    var destinationDS = buy.router?.dataStore
    if self.moneyupdate == "" {
        destinationDS?.money = money
    }else {
        destinationDS?.money = moneyupdate
    }
//    destinationDS.dateData = dateFunds
    let sale  = UIStoryboard.init(name: "Main", bundle: nil).instantiateViewController(withIdentifier: "SaleViewController") as! SaleViewController
    let change = UIStoryboard.init(name: "Main", bundle: nil).instantiateViewController(withIdentifier: "ChangeViewController") as! ChangeViewController
  
    
            let viewControllers = [
    
                buy,
                sale,
                change
             
            ]
            
            let pagingViewController = PagingViewController(viewControllers: viewControllers)
            
            // Make sure you add the PagingViewController as a child view
            // controller and constrain it to the edges of the view.
            addChild(pagingViewController)
        self.pageViewPanging.addSubview(pagingViewController.view)
   
      //      view.constrainToEdges(pagingViewController.view)
             pagingViewController.didMove(toParent: self)
        pagingViewController.view.translatesAutoresizingMaskIntoConstraints = false
        NSLayoutConstraint.activate([
            pagingViewController.view.topAnchor.constraint(equalTo: self.pageViewPanging.topAnchor),
              pagingViewController.view.bottomAnchor.constraint(equalTo: self.pageViewPanging.bottomAnchor),
              pagingViewController.view.leadingAnchor.constraint(equalTo: self.pageViewPanging.leadingAnchor),
              pagingViewController.view.trailingAnchor.constraint(equalTo: self.pageViewPanging.trailingAnchor),
        ])
        
  }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  func doSomething()
  {
    let request = Trade.Something.Request()
    interactor?.doSomething(request: request)
  }
 
    func displaySomething(viewModel: Trade.Something.ViewModel) {
        
    }
    func setNotificationCenterTradeSearch() {
        NotificationCenter.default.addObserver(self, selector: #selector(receivedTradeSearchNotificationCenter), name: NSNotification.Name(NotificationCenterTradeSearch.Clicked.rawValue), object: nil)
    }
    @objc func receivedTradeSearchNotificationCenter(notifition: Notification) {
        print("Did received")
        if let data = notifition.userInfo as NSDictionary? {
     
            picefunds = data["picefunds"]  as? String ?? ""
            print("picefundstrade", picefunds)
            if picefunds == "" {
                
            } else {
               
               
            }
        }
    }
    func setNotificationCenterBuy() {
        NotificationCenter.default.addObserver(self, selector: #selector(receivedBuyNotificationCenter), name: NSNotification.Name(NotificationCenterTrade.Clicked.rawValue), object: nil)
    }
    @objc func receivedBuyNotificationCenter(notifition: Notification) {
        print("Did received")
        if let data = notifition.userInfo as NSDictionary? {
            self.payment = data["payment"] as? String ?? ""
            self.picefunds = data["picefunds"] as? String ?? ""
            self.enName = data["enName"] as? String ?? ""
            self.thName = data["thName"] as? String ?? ""
            self.risk = data["risk"] as? String ?? ""
            self.date  = data["date"] as? String ?? ""
            let moneyupdate =  data["moneyupdate"] as? String
            let moneycurrency = moneyupdate?.currency
      print("moneyupdatetrade", moneyupdate ?? "")
            self.moneyupdate = moneyupdate ?? ""
            if self.moneyupdate == "" {
                self.lbmonney.setTitle(money, for: .normal)
               
            }else if self.moneyupdate == self.money {
                print("moneyupdate1", self.moneyupdate)
                print("money1", self.money)
               
            }else {
                self.lbmonney.setTitle(moneycurrency, for: .normal)
            }
        }
    }
   
}
