//
//  DeleteMenuInteractor.swift
//  QuizFundsPhillip
//
//  Created by BUSSNQ TH on 29/3/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DeleteMenuBusinessLogic
{
    func dofetchHistory(request: DeleteMenu.FetchHistoryData.Request)
    func dodeleteorder(request: DeleteMenu.DeleteOrderNo.Request)
    func dodeletefcode(request: DeleteMenu.DeleteFcode.Request)
    
    
}

protocol DeleteMenuDataStore
{
  var getHistory: GetHistoryModel? { get set }
    var getDeleteOrder: DeleteModel? {get set}
}

class DeleteMenuInteractor: DeleteMenuBusinessLogic, DeleteMenuDataStore
{
    var getHistory: GetHistoryModel?
    var getDeleteOrder: DeleteModel?
  var presenter: DeleteMenuPresentationLogic?
  var worker: DeleteMenuWorker?
  //var name: String = ""
  
  // MARK: Do something
  
  func dofetchHistory(request: DeleteMenu.FetchHistoryData.Request)
  {
    worker = DeleteMenuWorker()
    let username = request.username
    let portNo = request.portno
    let fcode = request.fcode
    worker?.fecthGetHistoryData (username: username, portNo: portNo, fcode: fcode) { (getHistory, error ) in
        if error != nil {
            let response =  DeleteMenu.FetchHistoryData.Response(getHistory: nil, error: error)
            self.presenter?.presentfetchHistory(response: response)
        }
        
        let response =  DeleteMenu.FetchHistoryData.Response(getHistory: getHistory, error: nil)
//      print("getOrderData", getOrderData)
        self.presenter?.presentfetchHistory(response: response)
    }
   
    let response = DeleteMenu.FetchHistoryData.Response()
    presenter?.presentfetchHistory(response: response)
  }
    func dodeleteorder(request: DeleteMenu.DeleteOrderNo.Request) {
        worker = DeleteMenuWorker()
        let delFlag = request.delflag
        let username = request.username
        let portNo = request.portno
        let channel = request.channel
        let ordno  = request.ordno
        print("delFlag>",delFlag)
        print("username>",username)
        print("portNo>",portNo)
        print("channel>",channel)
        print("ordno>",ordno)
        worker?.fecthdeltedata(DelFlag: delFlag , username: username , portNo: portNo, channel: channel, ordno: ordno ) { (getDeleteOrder, error ) in
            if error != nil {
                let response =  DeleteMenu.DeleteOrderNo.Response(delorder: nil, error: error)
                self.presenter?.presentDeleteOrder(response: response)
            }
            
            let response =  DeleteMenu.DeleteOrderNo.Response(delorder:
        getDeleteOrder, error: nil)
    //      print("getOrderData", getOrderData)
            self.presenter?.presentDeleteOrder(response: response)
        }
       
        let response = DeleteMenu.DeleteOrderNo.Response()
        presenter?.presentDeleteOrder(response: response)
      }
    func dodeletefcode(request: DeleteMenu.DeleteFcode.Request) {
        worker = DeleteMenuWorker()
        let delFlag = request.delflag
        let username = request.username
        let portNo = request.portno
        let channel = request.channel
        let fcode  = request.fcode
        print("delFlag>",delFlag)
        print("username>",username)
        print("portNo>",portNo)
        print("channel>",channel)
        print("ordno>",fcode)
        worker?.fecthdeletefcode(DelFlag: delFlag , username: username , portNo: portNo, channel: channel, fcode: fcode ) { (getDeleteOrder, error ) in
            if error != nil {
                let response =  DeleteMenu.DeleteFcode.Response(delorder: nil, error: error)
                self.presenter?.presentDeleteFcode(response: response)
            }
            
            let response =  DeleteMenu.DeleteFcode.Response(delorder:
        getDeleteOrder, error: nil)
    //      print("getOrderData", getOrderData)
            self.presenter?.presentDeleteFcode(response: response)
        }
       
        let response = DeleteMenu.DeleteFcode.Response()
        presenter?.presentDeleteFcode(response: response)
      }
}
