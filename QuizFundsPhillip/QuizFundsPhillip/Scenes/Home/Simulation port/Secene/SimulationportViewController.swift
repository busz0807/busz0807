//
//  SimulationportViewController.swift
//  QuizFundsPhillip
//
//  Created by BUSSNQ TH on 9/3/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CenteredCollectionView
import UIColor_Hex_Swift
protocol SimulationportDisplayLogic: class
{

      func displayFecthGetOrderData(viewModel: Simulationport.GetOrder.ViewModel)
      func displayFecthGetOrderData2(viewModel: Simulationport.GetOrder2.ViewModel)
      func displayFecthGetOrderData3(viewModel: Simulationport.GetOrder3.ViewModel)
      func displayFecthGetOrderData4(viewModel: Simulationport.GetOrder4.ViewModel)
      func displayFecthGetOrderData5(viewModel: Simulationport.GetOrder5.ViewModel)
}

class SimulationportViewController: UIViewController, SimulationportDisplayLogic
{
    @IBAction func btnback(_ sender: Any) {
        self.dismiss(animated: true, completion: nil)
    }
  
    let cellPercentWidth: CGFloat = 1.0
    var centeredCollectionViewFlowLayout: CenteredCollectionViewFlowLayout!
    var mainpage = "Simulationport"
    var getOrderData: GetOrderModel?
    var getOrderData2: GetOrderModel?
    var getOrderData3: GetOrderModel?
    var getOrderData4: GetOrderModel?
    var getOrderData5: GetOrderModel?
    var sumValue: Double?
    var sumunrealizedReturns: Double?
    var sumunrealizedProfits: Double?
    var indexcollectioncenterred: Int?
    @IBAction func btngoToFunds(_ sender: Any) {
        print("mainpage", mainpage)
        router?.goToSearchFundsPreview(mainpage: self.mainpage)
    }
    @IBOutlet weak var pageControl: UIPageControl!
    @IBOutlet weak var viewtableview: UIView!
    @IBOutlet weak var lbtotalfunds: UILabel!
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var setviewFunds: UIView!
    @IBOutlet weak var collectionView: UICollectionView!
    var interactor: SimulationportBusinessLogic?
  var router: (NSObjectProtocol & SimulationportRoutingLogic & SimulationportDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = SimulationportInteractor()
    let presenter = SimulationportPresenter()
    let router = SimulationportRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    doFecthGetOrderData()
    doFecthGetOrderData2()
    doFecthGetOrderData3()
    doFecthGetOrderData4()
    doFecthGetOrderData5()

    self.setviewFunds.clipsToBounds = true
    self.setviewFunds.layer.cornerRadius = 30
//    self.setView.layer.shadowOpacity = 0.3
    self.setviewFunds.layer.shadowRadius = 50
    self.setviewFunds.layer.masksToBounds = false
    self.viewtableview.clipsToBounds = true
    self.viewtableview.layer.cornerRadius = 15
//    self.setView.layer.shadowOpacity = 0.3
    self.viewtableview.layer.shadowRadius = 10
    self.viewtableview.layer.masksToBounds = false
   
    configurePageControl()
//    pageControl.currentPage = 5
    pageControl.numberOfPages = 5

    // Get the reference to the CenteredCollectionViewFlowLayout (REQURED)
    
     collectionView.collectionViewLayout = CenteredCollectionViewFlowLayout()
     // Get the reference to the CenteredCollectionViewFlowLayout (REQURED)
     centeredCollectionViewFlowLayout = collectionView.collectionViewLayout as? CenteredCollectionViewFlowLayout
    // Modify the collectionView's decelerationRate (REQURED)
    collectionView.decelerationRate = UIScrollView.DecelerationRate.fast
    centeredCollectionViewFlowLayout?.itemSize = CGSize(
        width: 390 * cellPercentWidth,
        height: 180 * cellPercentWidth * cellPercentWidth
    )
    centeredCollectionViewFlowLayout.minimumLineSpacing = 50
    
  }
    func configurePageControl() {
        // The total number of pages that are available is based on how many available colors we have.
        self.pageControl.numberOfPages = 1
        self.pageControl.currentPage = 1
        self.pageControl.tintColor = UIColor.red
        self.pageControl.pageIndicatorTintColor = UIColor.darkGray
        self.pageControl.currentPageIndicatorTintColor = UIColor.white
    }
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
    func doFecthGetOrderData() {
    let request = Simulationport.GetOrder.Request(username: "bookling01", portNo: 1)
    interactor?.doFecthGetOrderData(request: request)
  }
    func doFecthGetOrderData2() {
    let request = Simulationport.GetOrder2.Request(username: "bookling01", portNo: 2)
    interactor?.doFecthGetOrderData2(request: request)
  }
    func doFecthGetOrderData3() {
    let request = Simulationport.GetOrder3.Request(username: "bookling01", portNo: 3)
    interactor?.doFecthGetOrderData3(request: request)
  }
    func doFecthGetOrderData4() {
    let request = Simulationport.GetOrder4.Request(username: "bookling01", portNo: 4)
    interactor?.doFecthGetOrderData4(request: request)
  }
    func doFecthGetOrderData5() {
    let request = Simulationport.GetOrder5.Request(username: "bookling01", portNo: 5)
    interactor?.doFecthGetOrderData5(request: request)
  }
    func displayFecthGetOrderData(viewModel: Simulationport.GetOrder.ViewModel) {
//        print("GetOrder", viewModel.getOrderDate)
//        print("err", viewModel.error)
        let data = viewModel.getOrderDate
        self.getOrderData = data
//        print("count",   self.getOrderData?.Data.count ?? 0)
//        let count = self.getOrderData?.Data.count ?? 0
//        let unrealizedReturns1 = self.getOrderData?.Data[0].unrealizedReturns ?? 0
//        let unrealizedReturns2 = self.getOrderData?.Data[1].unrealizedReturns ?? 0
//        let unrealizedReturns3 = self.getOrderData?.Data[2].unrealizedReturns ?? 0
//        self.sumunrealizedReturns = unrealizedReturns1 + unrealizedReturns2 + unrealizedReturns3
//
//        let unrealizedProfits1 = self.getOrderData?.Data[0].unrealizedProfits ?? 0
//        let unrealizedProfits2 = self.getOrderData?.Data[1].unrealizedProfits ?? 0
//        let unrealizedProfits3 = self.getOrderData?.Data[2].unrealizedProfits ?? 0
//        self.sumunrealizedProfits = unrealizedProfits1 + unrealizedProfits2 + unrealizedProfits3
//
//        let currentValue1 = self.getOrderData?.Data[0].currentValue ?? 0
//        let currentValue2 = self.getOrderData?.Data[1].currentValue ?? 0
//        let currentValue3 = self.getOrderData?.Data[2].currentValue ?? 0
//        self.sumValue = currentValue1 + currentValue2 + currentValue3
        self.tableView.reloadData()
        self.collectionView.reloadData()
    }
    func displayFecthGetOrderData2(viewModel: Simulationport.GetOrder2.ViewModel){
//        print("GetOrder2", viewModel.getOrderDate2)
//        print("err2", viewModel.error)
        self.getOrderData2 = viewModel.getOrderDate2
//        let unrealizedReturns1 = self.getOrderData2?.Data[0].unrealizedReturns ?? 0
//        let unrealizedReturns2 = self.getOrderData2?.Data[1].unrealizedReturns ?? 0
//        let unrealizedReturns3 = self.getOrderData2?.Data[2].unrealizedReturns ?? 0
//        self.sumunrealizedReturns = unrealizedReturns1 + unrealizedReturns2 + unrealizedReturns3
//        
//        let unrealizedProfits1 = self.getOrderData2?.Data[0].unrealizedProfits ?? 0
//        let unrealizedProfits2 = self.getOrderData2?.Data[1].unrealizedProfits ?? 0
//        let unrealizedProfits3 = self.getOrderData2?.Data[2].unrealizedProfits ?? 0
//        self.sumunrealizedProfits = unrealizedProfits1 + unrealizedProfits2 + unrealizedProfits3
//        
//        let currentValue1 = self.getOrderData2?.Data[0].currentValue ?? 0
//        let currentValue2 = self.getOrderData2?.Data[1].currentValue ?? 0
//        let currentValue3 = self.getOrderData2?.Data[2].currentValue ?? 0
//        self.sumValue = currentValue1 + currentValue2 + currentValue3
        self.tableView.reloadData()
        self.collectionView.reloadData()
    }
    func displayFecthGetOrderData3(viewModel: Simulationport.GetOrder3.ViewModel) {
//        print("GetOrder3", viewModel.getOrderDate3)
//        print("err3", viewModel.error)
        self.getOrderData3 = viewModel.getOrderDate3
    }
    func displayFecthGetOrderData4(viewModel: Simulationport.GetOrder4.ViewModel){
//        print("GetOrder4", viewModel.getOrderDate4)
//        print("err4", viewModel.error)
        self.getOrderData4 = viewModel.getOrderDate4

    }
    func displayFecthGetOrderData5(viewModel: Simulationport.GetOrder5.ViewModel) {
//        print("GetOrder5", viewModel.getOrderDate5)
//        print("err5", viewModel.error)
        self.getOrderData5 = viewModel.getOrderDate5

    }
}
extension SimulationportViewController: UICollectionViewDelegate, UICollectionViewDataSource {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return 5
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "SimulationPortViewCell", for: indexPath) as! SimulationPortViewCell
//        let indexcollection = self.indexcollectioncenterred
        if indexPath.row == 0 {
            cell.lbcurrency.text = "ไม่มีพอร์ตจำลอง"
            cell.lbport.text = ""
            cell.lbdouble.text = ""
            cell.lbfloat.text = ""
//            cell.index = indexPath.row
        } else if indexPath.row  == 1 {
            cell.lbport.text = "พอร์ตจำลอง\((indexPath.row) + 1)"
            cell.lbcurrency.text = "\(self.sumValue ?? 0 )"
//            cell.lbcurrency.font.withSize(30)
            cell.lbdouble.text = "+\(sumunrealizedProfits ?? 0)"
            cell.lbfloat.text = "+\(self.sumunrealizedReturns ?? 0)%"
//            cell.index = indexPath.row
        }  else if indexPath.row  == 2 {
            cell.lbcurrency.text = "ไม่มีพอร์ตจำลอง"
            cell.lbport.text = ""
            cell.lbdouble.text = ""
            cell.lbfloat.text = ""
//            cell.index = indexPath.row
        }  else if indexPath.row == 3 {
            cell.lbport.text = "พอร์ตจำลอง\((indexPath.row) + 1)"
            cell.lbcurrency.text = "\(self.sumValue ?? 0 )"
//            cell.lbcurrency.font.withSize(30)
            cell.lbdouble.text = "+\(sumunrealizedProfits ?? 0)"
            cell.lbfloat.text = "+\(self.sumunrealizedReturns ?? 0)%"
//            cell.index = indexPath.row
        }  else {
            cell.lbcurrency.text = "ไม่มีพอร์ตจำลอง"
            cell.lbport.text = ""
            cell.lbdouble.text = ""
            cell.lbfloat.text = ""
        }
        return cell
    }

//    func scrollViewDidEndDecelerating(_ scrollView: UIScrollView) {
//        print("Current centered index: \(Int(centeredCollectionViewFlowLayout.currentCenteredPage ?? 0))")
//        self.pageControl.currentPage = Int(centeredCollectionViewFlowLayout.currentCenteredPage  ?? 0)
//        self.collectionView.reloadData()
//    }
//
//    func scrollViewDidEndScrollingAnimation(_ scrollView: UIScrollView) {
//        print("Current centered index: \(Int(centeredCollectionViewFlowLayout.currentCenteredPage ?? 0))")
//      
//    }
    func collectionView(_ collectionView: UICollectionView, willDisplay cell: UICollectionViewCell, forItemAt indexPath: IndexPath)  {
        self.indexcollectioncenterred = indexPath.row
//        print("indexcollectioncenterred>>",indexcollectioncenterred ?? 0)
        self.tableView.reloadData()
//        self.collectionView.reloadData()
        pageControl.currentPage = indexPath.row
    }
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
//        print("indexPathdid", indexPath.row)
        router?.goToPortDetail(portNo: indexPath.row)
    }
}
extension SimulationportViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        let indexcollection = self.indexcollectioncenterred
//        print("indexcollection", indexcollection ?? 0)
        if indexcollection == 0 {
            let count = self.getOrderData?.Data.count ?? 0
            return count
        } else  if indexcollection == 1 {
            let count = self.getOrderData2?.Data.count ?? 0
            return count
        } else  if indexcollection == 2 {
            let count = self.getOrderData3?.Data.count ?? 0
            return count
        } else  if indexcollection == 3 {
            let count = self.getOrderData4?.Data.count ?? 0
            return count
        }else {
            let count = self.getOrderData5?.Data.count ?? 0
            return count
        }
        
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "FundsViewCell") as! FundsViewCell
        let indexcollection = self.indexcollectioncenterred
        if indexcollection == 0 {
            cell.getOrderData = self.getOrderData?.Data[indexPath.row]
            cell.indexcollectioncenterred = indexcollection ?? 0
            tableView.separatorStyle = .none
        } else  if indexcollection == 1 {
            cell.getOrderData2 = self.getOrderData2?.Data[indexPath.row]
            cell.indexcollectioncenterred = indexcollection ?? 0
            tableView.separatorStyle = .singleLine
        } else  if indexcollection == 2 {
            cell.getOrderData3 = self.getOrderData3?.Data[indexPath.row]
            cell.indexcollectioncenterred = indexcollection ?? 0
            tableView.separatorStyle = .none
        } else  if indexcollection == 3 {
            cell.getOrderData4 = self.getOrderData4?.Data[indexPath.row]
            cell.indexcollectioncenterred = indexcollection ?? 0
            tableView.separatorStyle = .singleLine
        }else {
            cell.getOrderData5 = self.getOrderData5?.Data[indexPath.row]
            cell.indexcollectioncenterred = indexcollection ?? 0
            tableView.separatorStyle = .none
        }
//        print("indexcentered", cell.indexcollectioncenterred)
        
        return cell
    }
    
    
}


