//
//  FundAnslystReportWorker.swift
//  QuizFundsPhillip
//
//  Created by BUSSNQ TH on 28/1/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Alamofire
import SwiftyJSON
class FundAnslystReportWorker
{
  func doSomeWork()
  {
  }
    typealias FecthAnalystReportMonthlyDataCompletionHandler = (_ analystReportMonthlyData: [AnalystReportMonthlyModel]?,_ error: Error?) -> ()
    func fetchDataMonthly(completionHandler: @escaping FecthAnalystReportMonthlyDataCompletionHandler) {
//        let URL = "https://servicebeta.poems.in.th/FundSmart/api/funds/reports?AnalystReport=IPO"
        let router = Funds.analystReport
        
        print(router)
        Alamofire.request(router).responseJSON { response in
//            print("Data",String(data: response.data!, encoding: .utf8)!)
            if response.error != nil {
                completionHandler(nil, response.error)
                return
            }
            if let data = response.value {
                do {
                    let dataJSON = JSON(data)
                    let fundMonthly = dataJSON["AnalystReport"]["Monthly"]
                    let fundMonthlyData = try fundMonthly.rawData(options: .fragmentsAllowed)
                    let analystReportMonthlyData = try JSONDecoder().decode([AnalystReportMonthlyModel].self, from: fundMonthlyData)
                    completionHandler(analystReportMonthlyData, nil)
                } catch let error {
                    completionHandler(nil, error)
                }
            }
        }
    }
    typealias FecthAnalystReportWeeklyDataCompletionHandler = (_ analystReportWeeklyData: [AnalystReportWeeklyModel]?,_ error: Error?) -> ()
    func fetchDataWeekly(completionHandler: @escaping FecthAnalystReportWeeklyDataCompletionHandler) {
//        let URL = "https://servicebeta.poems.in.th/FundSmart/api/funds/reports?AnalystReport=IPO"
        let router = Funds.analystReport
//        print(router)
        Alamofire.request(router).responseJSON { response in
//            print("Data",String(data: response.data!, encoding: .utf8)!)
            if response.error != nil {
                completionHandler(nil, response.error)
                return
            }
            if let data = response.value {
                do {
                    let dataJSON = JSON(data)
                    let fundWeekly = dataJSON["AnalystReport"]["Weekly"]
                    let fundWeeklyData = try fundWeekly.rawData(options: .fragmentsAllowed)
                    let analystReportWeeklylyData = try JSONDecoder().decode([AnalystReportWeeklyModel].self, from: fundWeeklyData)
                    completionHandler(analystReportWeeklylyData, nil)
                } catch let error {
                    completionHandler(nil, error)
                }
            }
        }
    }

    typealias FecthAnalystTalksDataCompletionHandler = (_ analystTalksData: [AnalystTalksModel]?,_ error: Error?) -> ()
    func  fetchDataAnalystTalks(completionHandler: @escaping FecthAnalystTalksDataCompletionHandler) {
//        let URL = "https://servicebeta.poems.in.th/FundSmart/api/funds/reports?AnalystReport=IPO"
        let router = Funds.analystReport
        Alamofire.request(router).responseJSON  { response in
//            print("Data",String(data: response.data!, encoding: .utf8)!)
            if response.error != nil {
                completionHandler(nil, response.error)
                return
            }
            if let data = response.value {
                do {
                    let dataJSON = JSON(data)
                    let fundAnalystTalk = dataJSON["AnalystTalk"]
                    let fundAnalystTalkData = try fundAnalystTalk.rawData(options: .fragmentsAllowed)
                    let analystTalksData = try JSONDecoder().decode([AnalystTalksModel].self, from: fundAnalystTalkData)
//                    print("analystTalksData", analystTalksData)
                    completionHandler(analystTalksData, nil)
                } catch let error {
                    completionHandler(nil, error)
                }
            }
        }
    }

}

