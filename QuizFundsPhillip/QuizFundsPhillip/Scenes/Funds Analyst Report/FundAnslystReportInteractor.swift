//
//  FundAnslystReportInteractor.swift
//  QuizFundsPhillip
//
//  Created by BUSSNQ TH on 28/1/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FundAnslystReportBusinessLogic
{
  func doSomething(request: FundAnslystReport.Something.Request)
    func fetchMonthlyData(request: FundAnslystReport.MonthlyData.Request)
    func fetchWeeklyData(request: FundAnslystReport.WeeklyData.Request)
    func fetchAnalystTalksData(request: FundAnslystReport.AnalystTalk.Request)
}

protocol FundAnslystReportDataStore
{
    var analystReport: AnalystReportModel? { get set }
    var analystReportMonthly : AnalystReportMonthlyModel? { get set}
    var analystReportWeekly : AnalystReportWeeklyModel? { get set}
    var analystTalkData: AnalystTalksModel? {get set}
}

class FundAnslystReportInteractor: FundAnslystReportBusinessLogic, FundAnslystReportDataStore
{
    var analystReportMonthly: AnalystReportMonthlyModel?
    var analystReportWeekly: AnalystReportWeeklyModel?
    var analystTalkData: AnalystTalksModel?
    var analystReport: AnalystReportModel?
    var presenter: FundAnslystReportPresentationLogic?
    var worker: FundAnslystReportWorker?
  //var name: String = ""
  
  // MARK: Do something
  
  func doSomething(request: FundAnslystReport.Something.Request)
  {
    worker = FundAnslystReportWorker()
    worker?.doSomeWork()

  }
    func fetchMonthlyData(request: FundAnslystReport.MonthlyData.Request) {
        worker = FundAnslystReportWorker()
        worker?.fetchDataMonthly() { (analystReportMonthly, error) in
            if error != nil {
                let response = FundAnslystReport.MonthlyData.Response(analystReportMonthlyData: nil, error: error)
                self.presenter?.presentMonthly(response: response)
                return
            }
            let response = FundAnslystReport.MonthlyData.Response(analystReportMonthlyData: analystReportMonthly, error: nil)
            self.presenter?.presentMonthly(response: response)
        }
}

func fetchWeeklyData(request: FundAnslystReport.WeeklyData.Request) {
    worker = FundAnslystReportWorker()
    worker?.fetchDataWeekly() { (analystReportWeekly, error) in
        if error != nil {
            let response = FundAnslystReport.WeeklyData.Response(analystReportWeeklyData: nil, error: error)
            self.presenter?.presentWeekly(response: response)
            return
        }
        let response = FundAnslystReport.WeeklyData.Response(analystReportWeeklyData: analystReportWeekly, error: nil)
        self.presenter?.presentWeekly(response: response)
    }
    }
    func fetchAnalystTalksData(request: FundAnslystReport.AnalystTalk.Request){
        worker = FundAnslystReportWorker()
        worker?.fetchDataAnalystTalks() { (analystTalkData, error) in
            if error != nil {
                let response = FundAnslystReport.AnalystTalk.Response(analystTalkData: nil, error: error)
                self.presenter?.presentAnalystTalks(response: response)
                return
            }
            let response = FundAnslystReport.AnalystTalk.Response(analystTalkData: analystTalkData, error: nil)
            self.presenter?.presentAnalystTalks(response: response)
        }
    }
}
